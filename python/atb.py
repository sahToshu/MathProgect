from selenium import webdriver
from selenium.webdriver.edge.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import mysql.connector
import time
import random
import csv
import os
import subprocess
import re
from config import host, user, password, db_name, port

def start_browser():
    """–ó–∞–ø—É—Å–∫–∞—î –±—Ä–∞—É–∑–µ—Ä Edge —É —Ä–µ–∂–∏–º—ñ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è"""
    subprocess.Popen([r"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe", "--remote-debugging-port=9222"], shell=True)
    time.sleep(3)
    print("üü¢ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")

def clear_database(conn):
    """–û—á–∏—â–∞—î –±–∞–∑—É –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–æ–±–æ—Ç–∏"""
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("DELETE FROM atb_products")
            conn.commit()
            print("üóëÔ∏è –ë–∞–∑—É –¥–∞–Ω–∏—Ö –æ—á–∏—â–µ–Ω–æ")
        except Exception as e:
            conn.rollback()
            print(f"üî¥ –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        finally:
            cursor.close()

def connect_to_database():
    """–ü—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö MySQL"""
    try:
        conn = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=db_name,
            port=port,
        )
        print("üü¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö MySQL")
        return conn
    except Exception as e:
        print(f"üî¥ –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL: {e}")
        return None

def save_to_database(conn, products):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ç–æ–≤–∞—Ä–∏ —É –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    if not conn:
        return
    
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS atb_products (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(500) NOT NULL,
                price DECIMAL(10,2) NOT NULL,
                price_bot DECIMAL(10,2),
                discount VARCHAR(50),
                unit VARCHAR(10),
                quantity DECIMAL(10,3),
                image_url VARCHAR(512),
                category VARCHAR(100),
                scraped_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX idx_category (category),
                INDEX idx_price (price)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """)
        
        for product in products:
            # –û–±—Ä–æ–±–∫–∞ –∑–Ω–∏–∂–∫–∏ (—è–∫—â–æ —î)
            discount_text = product.get('discount').get_text(strip=True) if product.get('discount') else None
            # –û–±—Ä–æ–±–∫–∞ —Ü—ñ–Ω–∏ price_bot (—è–∫—â–æ —î)
            price_bot = float(product['price_bot']['value']) if product.get('price_bot') and 'value' in product['price_bot'].attrs else None
            
            cursor.execute("""
                INSERT INTO atb_products 
                (name, price, price_bot, discount, unit, quantity, image_url, category)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                product.get('name'),
                product.get('price'),
                price_bot,
                discount_text,
                product.get('unit'),
                product.get('quantity'),
                product.get('image_url'),
                product.get('category')
            ))
        
        conn.commit()
        print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä—ñ–≤ —É –ë–î")
    except Exception as e:
        conn.rollback()
        print(f"üî¥ –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –ë–î: {e}")
        import traceback
        traceback.print_exc()  # –î—Ä—É–∫—É—î–º–æ –ø–æ–≤–Ω–∏–π traceback –ø–æ–º–∏–ª–∫–∏
    finally:
        cursor.close()

def connect_to_existing_edge():
    """–ü—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –¥–æ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ Edge"""
    edge_options = Options()
    edge_options.add_experimental_option("debuggerAddress", "localhost:9222")
    try:
        driver = webdriver.Edge(options=edge_options)
        print("üü¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ Edge")
        return driver
    except Exception as e:
        print(f"üî¥ –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        return None

def human_like_delay(min=1, max=3):
    """–Ü–º—ñ—Ç—É—î –ª—é–¥—Å—å–∫—É –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –¥—ñ—è–º–∏"""
    delay = random.uniform(min, max)
    time.sleep(delay)

def extract_weight_and_unit(text):
    """–í–∏—Ç—è–≥—É—î –≤–∞–≥—É —Ç–∞ –æ–¥–∏–Ω–∏—Ü—é –≤–∏–º—ñ—Ä—É –∑ —Ç–µ–∫—Å—Ç—É"""
    weight_match = re.search(r'(\d+[,.]?\d*)\s*([–∞-—è“ë—î—ñ—óa-z]{1,3}\b)', text, re.IGNORECASE)
    if weight_match:
        quantity = float(weight_match.group(1).replace(',', '.'))
        unit = weight_match.group(2).lower()
        return quantity, unit
    return None, None

def extract_products(driver):
    """–í–∏—Ç—è–≥—É—î –¥–∞–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
    try:
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "article.catalog-item"))
        )
        soup = BeautifulSoup(driver.page_source, 'html.parser')
        products = soup.find_all('article', class_='catalog-item')
        extracted = []
        
        for product in products:
            try:
                # –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É
                name_tag = product.find('div', class_='catalog-item__title')
                name = name_tag.get_text(strip=True) if name_tag else None
                if not name:
                    continue
                
                # –¶—ñ–Ω–∞
                price_data = product.find('data', class_='product-price__top')
                price = float(price_data['value']) if price_data and 'value' in price_data.attrs else None
                if price is None:
                    continue
                # –°–∫–∏–¥–æ—á–∫–∞
                price_bot = product.find('data', class_='product-price__bottom')
                discount = product.find('span', class_='custom-product-label')
                # –û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É
                unit_span = product.find('span', class_='product-price__unit')
                unit = unit_span.get_text(strip=True)[1:] if unit_span else None
                
                # –í–∏—Ç—è–≥—É—î–º–æ –≤–∞–≥—É/–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑ –Ω–∞–∑–≤–∏
                quantity, extracted_unit = extract_weight_and_unit(name)
                if extracted_unit:
                    unit = extracted_unit
                elif unit == "—à—Ç":
                    quantity = 1
                else:
                    quantity = None
                
                # –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                img_tag = product.find('img', class_='catalog-item__img')
                image_url = img_tag['src'] if img_tag and 'src' in img_tag.attrs else None
                if image_url and not image_url.startswith(('http', '//')):
                    image_url = f"https://www.atbmarket.com{image_url}"
                
                extracted.append({
                    'name': name,
                    'price': price,
                    'price_bot': price_bot,
                    'discount': discount,
                    'unit': unit,
                    'quantity': quantity,
                    'image_url': image_url
                })
                
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–æ–≤–∞—Ä—É: {e}")
                continue
                
        print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ: {len(extracted)}")
        return extracted
        
    except Exception as e:
        print(f"üî¥ –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤: {e}")
        return []

def process_category(driver, base_url, category_name, min_products=36, max_pages=17):
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤–∫–∞–∑–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    all_products = []
    current_page = 1
    has_next_page = True
    
    while has_next_page and current_page <= max_pages:
        url = f"{base_url}?page={current_page}" if current_page > 1 else base_url
        print(f"\nüìÑ –û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É {current_page}: {url}")
        
        try:
            driver.get(url)
            human_like_delay(2, 4)
            
            # –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–∫—É (—è–∫—â–æ —î)
            try:
                age_btn = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "button.custom-blue-btn"))
                )
                age_btn.click()
                print("üîû –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –≤—ñ–∫")
                human_like_delay()
            except:
                pass
                
            products = extract_products(driver)
            if not products:
                print("‚ö†Ô∏è –¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                break
                
            all_products.extend(products)
            
            if len(products) < min_products:
                print(f"‚ö†Ô∏è –ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ª–∏—à–µ {len(products)} —Ç–æ–≤–∞—Ä—ñ–≤")
                break
                
            current_page += 1
            human_like_delay(3, 5)
            
        except Exception as e:
            print(f"üî¥ –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {e}")
            break
    
    for product in all_products:
        product['category'] = category_name
    
    print(f"‚úÖ –í—Å—å–æ–≥–æ –∑—ñ–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category_name}': {len(all_products)}")
    return all_products

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–∞—Ä—Å–∏–Ω–≥—É"""
    categories = [
        ("–û–≤–æ—á—ñ —Ç–∞ —Ñ—Ä—É–∫—Ç–∏", "https://www.atbmarket.com/catalog/287-ovochi-ta-frukti"),
        ("–ë–∞–∫–∞–ª—ñ—è", "https://www.atbmarket.com/catalog/285-bakaliya"),
        ("–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏", "https://www.atbmarket.com/catalog/molocni-produkti-ta-ajca"),
        ("–ú'—è—Å–æ", "https://www.atbmarket.com/catalog/maso"),
        ("–°–∏—Ä–∏", "https://www.atbmarket.com/catalog/siri"),
        ("–†–∏–±–∞ —Ç–∞ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏", "https://www.atbmarket.com/catalog/353-riba-i-moreprodukti"),
        ("–•–ª—ñ–±–æ–±—É–ª–æ—á–Ω—ñ –≤–∏—Ä–æ–±–∏", "https://www.atbmarket.com/catalog/325-khlibobulochni-virobi"),
        ("–ó–∞–º–æ—Ä–æ–∂–µ–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏", "https://www.atbmarket.com/catalog/322-zamorozheni-produkti"),
        ("–ö–æ–≤–±–∞—Å–∏ —Ç–∞ –º'—è—Å–Ω—ñ –¥–µ–ª—ñ–∫–∞—Ç–µ—Å–∏", "https://www.atbmarket.com/catalog/360-kovbasa-i-m-yasni-delikatesi"),
    ]
    
    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    start_browser()
    db_conn = connect_to_database()
    if db_conn:
        clear_database(db_conn)
    
    driver = connect_to_existing_edge()
    if not driver:
        return
    
    try:
        all_products = []
        
        for category_name, url in categories:
            products = process_category(driver, url, category_name)
            if products:
                all_products.extend(products)
                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
                if db_conn:
                    save_to_database(db_conn, products)
            
            human_like_delay(5, 8)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ CSV
        if all_products:
            info_folder = os.path.join(os.path.dirname(__file__), 'info')
            os.makedirs(info_folder, exist_ok=True)
            csv_path = os.path.join(info_folder, 'atb_products.csv')
            
            with open(csv_path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=[
                    'category', 'name', 'price', 'unit', 
                    'quantity', 'image_url'
                ])
                writer.writeheader()
                writer.writerows(all_products)
            
            print(f"üíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {csv_path}")
            
    except Exception as e:
        print(f"üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        driver.quit()
        print("üõë –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ")
        if db_conn:
            db_conn.close()
            print("üõë –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –∑–∞–∫—Ä–∏—Ç–æ")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ ATB Market")
    main()
    print("üèÅ –†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
